---
- name: Set up dev environment
  hosts: localhost
  vars:
    dotfiles_dir: "{{ lookup('env','HOME') }}/.dotfiles"
    alacritty_binary_path: "/usr/local/bin/alacritty"
    alacritty_version: "0.11.0" # https://github.com/alacritty/alacritty/tags
    apt_packages:
      cli:
        # Dev tools
        - fd-find
        - fzf
        - git
        - ripgrep
        - shellcheck
        - tig
        - tmux
        - zsh

        # Utils
        - curl
        - htop
        - net-tools
        - nload
        - stow
        - python3-psutil
        - python3-venv
        - ncdu
        - uuid
        - jq
        - unzip
      gui:
        # Utils
        - xdotool
        - xsel
        - xclip

        # GUI apps
        - arandr
        - flameshot
        - gromit-mpx
        - meld
        - pavucontrol
        - speedcrunch
        - rofi

  pre_tasks:
    - name: Set WSL fact
      set_fact:
        in_wsl: "{{ lookup('env', 'WSL_DISTRO_NAME') != '' }}"
      tags: wsl

    - name: Check if GTK is installed
      ansible.builtin.shell: "bash -c 'dpkg -l | grep gtk'"
      register: gtk_check
      ignore_errors: yes
      check_mode: no
      changed_when: False

    - name: Set GTK fact
      set_fact:
        has_gtk: "{{ gtk_check.rc == 0 }}"

  tasks:
    - name: Install GUI packages
      tags: apt
      become: true
      apt:
        pkg: "{{ apt_packages.gui }}"
      when: has_gtk

    - name: Install CLI packages
      tags: apt
      become: true
      apt:
        pkg: "{{ apt_packages.cli }}"

    - name: Create dotfile directories
      # This is created so that the stowing of certain directories only creates symlinks to the
      # files and not to any directory above.
      ansible.builtin.file:
        path: "{{ lookup('env','HOME') }}/{{ item }}"
        state: directory
        recurse: yes
      with_items:
        - .config/alacritty
        - .config/autostart
        - .config/nvim
        - .config/systemd/user
        - bin

    - name: Stow dotfiles
      tags: stow
      ansible.builtin.shell:
        chdir: "{{ dotfiles_dir }}"
        cmd: "stow --verbose {{ item }}"
      register: stow_out
      changed_when: 'stow_out.stderr is search("LINK: ")'
      with_items:
        - alacritty
        - bin
        - gdb
        - git
        - i3
        - tmux
        - vim
        - xmodmap
        - zsh

    - name: Download and install Hack nerd font
      # https://github.com/ryanoasis/nerd-fonts/tags
      tags: font
      vars:
        font_version: "v2.2.2"
        fonts_dir: "{{ lookup('env','HOME') }}/.fonts"
      block:
        - name: Check if fonts are installed
          ansible.builtin.stat:
            path: "{{ fonts_dir }}/Hack Regular Nerd Font Complete Mono.ttf"
          register: font_result

        - name: Create fonts directory
          ansible.builtin.file:
            path: "{{ fonts_dir }}"
            state: directory
          when: not font_result.stat.exists

        - name: Download fonts
          ansible.builtin.unarchive:
            src: "https://github.com/ryanoasis/nerd-fonts/releases/download/{{ font_version }}/Hack.zip"
            dest: "{{ fonts_dir }}"
            remote_src: yes
          when: not font_result.stat.exists

    - name: Install nvm and Nodejs
      # https://github.com/nvm-sh/nvm/tags
      tags: node
      vars:
        nvm_version: "v0.39.2"
      block:
        - name: Install nvm
          ansible.builtin.shell: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash"
          args:
            creates: "{{ lookup('env','HOME') }}/.nvm/nvm.sh"

        - name: Install Node.js
          ansible.builtin.shell: '. {{ ansible_env.HOME }}/.nvm/nvm.sh; nvm install --lts'
          args:
            creates: "{{ ansible_env.HOME }}/.nvm/versions/node"
            chdir: "{{ ansible_env.HOME }}"
            executable: /bin/zsh

    - name: Install lf
      # https://github.com/gokcehan/lf/tags
      tags: lf
      vars:
        lf_version: "r27"
        lf_install_dir: "{{ lookup('env','HOME') }}/.local/bin/"
      block:
        - name: Register current lf version
          ansible.builtin.shell: "{{ lf_install_dir }}/lf --version"
          register: lf_version_call
          ignore_errors: yes
          changed_when: false

        - name: Decide if installation of lf should continue
          set_fact:
            install_lf: "{{ lf_version_call is defined and lf_version_call.stdout != lf_version }}"

        - name: Create temporary build directory
          ansible.builtin.tempfile:
            state: directory
            suffix: build
          register: lf_tmp
          when: install_lf

        - name: Download lf
          ansible.builtin.get_url:
            url: "https://github.com/gokcehan/lf/releases/download/{{ lf_version }}/lf-linux-amd64.tar.gz"
            dest: "{{ lf_tmp.path }}/lf.tar.gz"
          when: install_lf

        - name: Unpack lf
          ansible.builtin.unarchive:
            src: "{{ lf_tmp.path }}/lf.tar.gz"
            dest: "{{ lf_install_dir }}"
          when: install_lf

        - name: Cleanup tarball
          ansible.builtin.file:
            path: "{{ lf_tmp.path }}"
            state: absent
          when: install_lf

    - name: Install oh-my-zsh
      tags: zsh
      vars:
        oh_my_zsh_dir: "{{ lookup('env','HOME') }}/.oh-my-zsh"
      block:
        - name: Register oh-my-zsh directory
          ansible.builtin.stat:
            path: "{{ oh_my_zsh_dir }}"
          register: oh_my_zsh_dir_stat
          changed_when: false

        - name: Decide if installation of oh-my-zsh should continue
          set_fact:
            install_oh_my_zsh: "{{ oh_my_zsh_dir_stat is defined and not oh_my_zsh_dir_stat.stat.exists }}"

        - name: Create temporary build directory
          ansible.builtin.tempfile:
            state: directory
            suffix: build
          register: oh_my_zsh_tmp
          when: install_oh_my_zsh

        - name: Download oh_my_zsh
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
            dest: "{{ oh_my_zsh_tmp.path }}/install.sh"
          when: install_oh_my_zsh

        - name: Install oh_my_zsh
          ansible.builtin.shell: "/bin/sh {{ oh_my_zsh_tmp.path }}/install.sh --unattended --keep-zshrc"
          when: install_oh_my_zsh

        - name: Cleanup install.sh
          ansible.builtin.file:
            path: "{{ oh_my_zsh_tmp.path }}"
            state: absent
          when: install_oh_my_zsh

        - name: Install auto suggestions
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-autosuggestions.git
            dest: "{{ oh_my_zsh_dir }}/plugins/zsh-autosuggestions"
            depth: 1

        - name: Install syntax highlighting
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
            dest: "{{ oh_my_zsh_dir }}/plugins/zsh-syntax-highlighting"
            depth: 1

        - name: Set zsh as default shell
          become: yes
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            shell: /bin/zsh

    - name: Install delta
      # https://github.com/dandavison/delta/tags
      tags: delta
      vars:
        delta_version: "0.14.0"
        delta_expected_version_output: "\u001b[0mdelta {{ delta_version }}\n\u001b[0m" # Stupid escape codes...
      block:
        - name: Register current delta version
          ansible.builtin.shell: "delta --version"
          register: delta_version_call
          ignore_errors: yes
          changed_when: false

        - name: Install delta's deb package
          become: yes
          apt:
            deb: "https://github.com/dandavison/delta/releases/download/{{ delta_version }}/git-delta_{{ delta_version }}_amd64.deb"
          when: delta_version_call is defined and delta_version_call.stdout != delta_expected_version_output

    - name: Install Neovim
      # https://github.com/neovim/neovim/tags
      tags: nvim
      vars:
        nvim_version: "0.8.1"
        nvim_expected_version_output: "NVIM v{{ nvim_version }}"
      block:
        - name: Register current nvim version
          ansible.builtin.shell: "nvim --version | grep -P -o 'NVIM v\\d+\\.\\d+\\.\\d+'"
          register: nvim_version_call
          ignore_errors: yes
          changed_when: false

        - name: Install nvim's deb package
          become: yes
          apt:
            deb: "https://github.com/neovim/neovim/releases/download/v{{ nvim_version }}/nvim-linux64.deb"
          when: nvim_version_call is defined and nvim_version_call.stdout != nvim_expected_version_output

        - name: Install Packer.nvim
          ansible.builtin.git:
            repo: https://github.com/wbthomason/packer.nvim
            dest: "{{ lookup('env','HOME') }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
            depth: 1

        - name: Install nvim plugins
          ansible.builtin.shell: "nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'"
          changed_when: false

    - name: Enable weather systemd units
      tags: weather
      when: not in_wsl
      block:
        - name: Enable weather service
          ansible.builtin.systemd:
            daemon_reload: yes
            scope: user
            name: weather.service
            enabled: yes

        - name: Enable weather timer
          ansible.builtin.systemd:
            scope: user
            name: weather.timer
            state: started
            enabled: yes

    - name: Set dconf settings
      tags: gnome
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        - name: Set windows action key
          key: "/org/gnome/desktop/wm/preferences/mouse-button-modifier"
          value: "'<Alt>'"
        - name: Set a flat mouse acceleration profile
          key: "/org/gnome/desktop/peripherals/mouse/accel-profile"
          value: "'flat'"
        - name: Disable notifications when screen is locked
          key: "/org/gnome/desktop/notifications/show-in-lock-screen"
          value: "false"
        - name: Don't attach modal windows to its parent
          key: "/org/gnome/mutter/attach-modal-dialogs"
          value: "true"
        - name: Show week numbers
          key: "/org/gnome/desktop/calendar/show-weekdate"
          value: "true"
        - name: Set blank screen timeout (seconds)
          key: "/org/gnome/desktop/session/idle-delay"
          value: "uint32 {{ 10 * 60 }}"
        - name: Disable default terminal shortcut
          key: "/org/gnome/settings-daemon/plugins/media-keys/terminal"
          value: "@as []"
      when: has_gtk

    - name: Set keyboard shortcuts
      tags: shortcuts
      vars:
        keyboard_shortcuts:
          - index: 0
            name: "'Launch Alacritty'"
            command: "'alacritty'"
            binding: "'<Primary><Alt>t'"
          - index: 1
            name: "'Flameshot'"
            command: "'flameshot gui'"
            binding: "'Print'"
          - index: 2
            name: "'Set dual display'"
            command: "'{{ lookup('env', 'HOME') }}/.screenlayout/default.sh'"
            binding: "'<Primary><Alt>1'"
          - index: 3
            name: "'Set main display only'"
            command: "'{{ lookup('env', 'HOME') }}/.screenlayout/main-only.sh'"
            binding: "'<Primary><Alt>0'"
          - index: 4
            name: "'Activate snippets'"
            command: "'{{ lookup('env', 'HOME') }}/bin/snippets.sh'"
            binding: "'<Primary><Alt>s'"
      when: has_gtk
      block:
        - name: Set shortcut names
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/name"
            value: "{{ item.name }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Set shortcut commands
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/command"
            value: "{{ item.command }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Set shortcut binding
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/binding"
            value: "{{ item.binding }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Generate shortcut list
          set_fact:
            shortcut_list: "{{ [prefix] | product(indices) | map('join') | list | product([suffix]) | map('join') | list }}"
          vars:
            prefix: "'/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom"
            suffix: "/'"
            indices: "{{ keyboard_shortcuts | map(attribute='index') }}"

        - name: Set shortcut list
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
            value: "[{{ ','.join(shortcut_list) }}]"

    - name: Register current Alacritty version
      ansible.builtin.shell: "{{ alacritty_binary_path }} --version | grep -P -o '\\d+\\.\\d+\\.\\d+'"
      register: alacritty_version_call
      ignore_errors: yes
      changed_when: false
      tags: alacritty

    - name: Decide if Alacritty build should continue
      set_fact:
        build_alacritty: "{{ has_gtk and alacritty_version_call is defined and alacritty_version_call.stdout != alacritty_version }}"
      tags: alacritty

    - name: Build Alacritty
      when: build_alacritty
      vars:
        git_dir: "{{ lookup('env','HOME') }}/Dev/other"
        repo_dir: "{{ git_dir }}/alacritty"
      tags: alacritty
      block:
        # Installation instructions: https://github.com/alacritty/alacritty/blob/master/INSTALL.md
        - name: Install Rustup and Cargo
          ansible.builtin.shell: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path -y"
          register: curl_out
          changed_when: 'curl_out.stdout is not search("unchanged")'
          args:
            executable: /bin/zsh

        - name: Use the stable Rust compiler
          ansible.builtin.shell: "rustup override set stable"
          changed_when: false
          args:
            executable: /bin/zsh

        - name: Make sure that the Rust compiler is up to date
          ansible.builtin.shell: "rustup update stable"
          changed_when: false
          args:
            executable: /bin/zsh

        - name: Install build dependencies
          become: true
          ansible.builtin.apt:
            pkg:
              - cmake
              - libfontconfig1-dev
              - libfreetype6-dev
              - libxcb-xfixes0-dev
              - libxkbcommon-dev
              - pkg-config
              - python3

        - name: Set up repo directory
          ansible.builtin.file:
            path: "{{ git_dir }}"
            state: directory
            recurse: yes

        - name: Clone repo
          diff: no
          ansible.builtin.git:
            repo: git@github.com:alacritty/alacritty.git
            dest: "{{ repo_dir }}"
            version: "v{{ alacritty_version }}"
            depth: 1

        - name: Build Alacritty
          ansible.builtin.shell: "cargo build --release"
          register: build_out
          changed_when: 'build_out.stderr is search("Compiling alacritty")'
          args:
            chdir: "{{ repo_dir }}"
            executable: /bin/zsh

        - name: Install files
          become: true
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode }}"
          with_items:
            - src: "{{ repo_dir }}/target/release/alacritty"
              dest: "{{ alacritty_binary_path }}"
              mode: "0755"
            - src: "{{ repo_dir }}/extra/logo/alacritty-term.svg"
              dest: "/usr/share/pixmaps/Alacritty.svg"
              mode: "0644"

        - name: Install .desktop file
          become: true
          ansible.builtin.shell: "desktop-file-install extra/linux/Alacritty.desktop"
          args:
            creates: "/usr/share/applications/Alacritty.desktop"
            chdir: "{{ repo_dir }}"

        - name: Update desktop database
          become: true
          ansible.builtin.shell: "update-desktop-database"

# ---
# TODO:
#   - Install Syncthing https://gist.github.com/carlwgeorge/dbe186ce7562843932ebd03ccccd1a6d
#   - Install pip packages
#     - virtualenvwrapper
#
# References:
#   - https://gist.github.com/carlwgeorge/c560a532b6929f49d9c0df52f75a68ae
