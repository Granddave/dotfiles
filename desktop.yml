---
- name: Set up desktop
  hosts: localhost
  vars:
    dotfiles_dir: "{{ lookup('env','HOME') }}/.dotfiles"
    apt_packages:
      cli:
        # Dev tools
        - fd-find
        - fzf
        - git
        - ripgrep
        - tig
        - tmux
        - zsh

        # Utils
        - curl
        - htop
        - net-tools
        - nload
        - stow
        - python3-psutil
        - ncdu
        - uuid
      gui:
        # Utils
        - xdotool
        - xsel

        # Misc
        - fonts-hack-ttf

        # GUI apps
        - arandr
        - flameshot
        - gromit-mpx
        - meld
        - pavucontrol
        - speedcrunch
        - rofi

  pre_tasks:
    - name: Check if gtk is installed
      command: dpkg-query -l gtk
      register: gtk_check
      ignore_errors: yes

    - name: Set GUI fact
      set_fact:
        has_gui: "{{ gtk_check.stdout.find('no packages found') != -1 }}"

    - name: debug
      debug:
        var: has_gui

  tasks:
    - name: Install GUI packages
      tags: apt
      become: true
      apt:
        pkg: "{{ apt_packages.gui }}"
      when: has_gui

    - name: Install CLI packages
      tags: apt
      become: true
      apt:
        pkg: "{{ apt_packages.cli }}"

    - name: Create systemd directory for user
      # This is created so that the stowing of certain directories only creates symlinks to the
      # files and not to any directory above.
      ansible.builtin.file:
        path: "{{ lookup('env','HOME') }}/.config/systemd/user"
        state: directory
        recurse: yes

    - name: Stow dotfiles
      tags: stow
      ansible.builtin.shell: "stow --dir {{ dotfiles_dir }} {{ item }}"
      register: stow_out
      with_items:
        - alacritty
        - bin
        - gdb
        - git
        - i3
        - tmux
        - vim
        - xmodmap
        - zsh

    - name: Install nvm and Nodejs
      # https://github.com/nvm-sh/nvm
      tags: node
      vars:
        nvm_version: "v0.39.1"
      block:
        - name: Install nvm
          shell: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash"
          args:
            creates: "{{ lookup('env','HOME') }}/.nvm/nvm.sh"
        - name: Install Node.js
          shell: '. {{ ansible_env.HOME }}/.nvm/nvm.sh; nvm install --lts'
          args:
            creates: "{{ ansible_env.HOME }}/.nvm/versions/node"
            chdir: "{{ ansible_env.HOME }}"
            executable: /bin/zsh

    - name: Install lf
      # https://github.com/gokcehan/lf/tags
      tags: lf
      vars:
        lf_version: "r27"
        lf_install_dir: "{{ lookup('env','HOME') }}/.local/bin/"
      block:
        - name: Register current lf version
          ansible.builtin.shell: "{{ lf_install_dir }}/lf --version"
          register: lf_version_call
          ignore_errors: yes
          changed_when: false

        - name: Decide if installation of lf should continue
          set_fact:
            install_lf: "{{ lf_version_call is defined and lf_version_call.stdout != lf_version }}"

        - name: Create temporary build directory
          ansible.builtin.tempfile:
            state: directory
            suffix: build
          register: lf_tmp
          when: install_lf

        - name: Download lf
          ansible.builtin.get_url:
            url: "https://github.com/gokcehan/lf/releases/download/{{ lf_version }}/lf-linux-amd64.tar.gz"
            dest: "{{ lf_tmp.path }}/lf.tar.gz"
          when: install_lf

        - name: Unpack lf
          ansible.builtin.unarchive:
            src: "{{ lf_tmp.path }}/lf.tar.gz"
            dest: "{{ lf_install_dir }}"
          when: install_lf

        - name: Cleanup tarball
          ansible.builtin.file:
            path: "{{ lf_tmp.path }}"
            state: absent
          when: install_lf

    - name: Install oh-my-zsh
      tags: zsh
      vars:
        oh_my_zsh_dir: "{{ lookup('env','HOME') }}/.oh-my-zsh"
      block:
        - name: Register oh-my-zsh directory
          ansible.builtin.stat:
            path: "{{ oh_my_zsh_dir }}"
          register: oh_my_zsh_dir_stat
          changed_when: false

        - name: Decide if installation of oh-my-zsh should continue
          set_fact:
            install_oh_my_zsh: "{{ oh_my_zsh_dir_stat is defined and not oh_my_zsh_dir_stat.stat.exists }}"

        - name: Create temporary build directory
          ansible.builtin.tempfile:
            state: directory
            suffix: build
          register: oh_my_zsh_tmp
          when: install_oh_my_zsh

        - name: Download oh_my_zsh
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
            dest: "{{ oh_my_zsh_tmp.path }}/install.sh"
          when: install_oh_my_zsh

        - name: Install oh_my_zsh
          ansible.builtin.shell: "/bin/sh {{ oh_my_zsh_tmp.path }}/install.sh --unattended --keep-zshrc"
          when: install_oh_my_zsh

        - name: Cleanup install.sh
          ansible.builtin.file:
            path: "{{ oh_my_zsh_tmp.path }}"
            state: absent
          when: install_oh_my_zsh

        - name: Install auto suggestions
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-autosuggestions.git
            dest: "{{ oh_my_zsh_dir }}/plugins/zsh-autosuggestions"
            depth: 1

        - name: Install syntax highlighting
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
            dest: "{{ oh_my_zsh_dir }}/plugins/zsh-syntax-highlighting"
            depth: 1

        - name: Set zsh as default shell
          become: yes
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            shell: /bin/zsh

    - name: Install delta
      # https://github.com/dandavison/delta/tags
      tags: delta
      vars:
        delta_version: "0.13.0"
        delta_expected_version_output: "\u001b[0mdelta {{ delta_version }}\n\u001b[0m" # Stupid escape codes...
      block:
        - name: Register current delta version
          ansible.builtin.shell: "delta --version"
          register: delta_version_call
          ignore_errors: yes
          changed_when: false

        - name: Install delta's deb package
          become: yes
          apt:
            deb: "https://github.com/dandavison/delta/releases/download/{{ delta_version }}/git-delta_{{ delta_version }}_amd64.deb"
          when: delta_version_call is defined and delta_version_call.stdout != delta_expected_version_output

    - name: Install Neovim
      # https://github.com/neovim/neovim/tags
      tags: nvim
      vars:
        nvim_version: "0.7.2"
        nvim_expected_version_output: "NVIM v{{ nvim_version }}"
      block:
        - name: Register current nvim version
          ansible.builtin.shell: "nvim --version | grep \"NVIM v\""
          register: nvim_version_call
          ignore_errors: yes
          changed_when: false

        - name: Install nvim's deb package
          become: yes
          apt:
            deb: "https://github.com/neovim/neovim/releases/download/v{{ nvim_version }}/nvim-linux64.deb"
          when: nvim_version_call is defined and nvim_version_call.stdout != nvim_expected_version_output

        - name: Install Packer.nvim
          ansible.builtin.git:
            repo: https://github.com/wbthomason/packer.nvim
            dest: "{{ lookup('env','HOME') }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
            depth: 1

    - name: Enable weather systemd units
      tags: weather
      block:
        - name: Enable weather service
          ansible.builtin.systemd:
            daemon_reload: yes
            scope: user
            name: weather.service
            enabled: yes

        - name: Enable weather timer
          ansible.builtin.systemd:
            scope: user
            name: weather.timer
            state: started
            enabled: yes

    - name: Set dconf settings
      tags: gnome
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        - name: Set windows action key
          key: "/org/gnome/desktop/wm/preferences/mouse-button-modifier"
          value: "'<Alt>'"
        - name: Set a flat mouse acceleration profile
          key: "/org/gnome/desktop/peripherals/mouse/accel-profile"
          value: "'flat'"
        - name: Disable notifications when screen is locked
          key: "/org/gnome/desktop/notifications/show-in-lock-screen"
          value: "false"
        - name: Don't attach modal windows to its parent
          key: "/org/gnome/mutter/attach-modal-dialogs"
          value: "true"
        - name: Show week numbers
          key: "/org/gnome/desktop/calendar/show-weekdate"
          value: "true"
        - name: Set blank screen timeout (seconds)
          key: "/org/gnome/desktop/session/idle-delay"
          value: "uint32 {{ 10 * 60 }}"
        - name: Disable default terminal shortcut
          key: "/org/gnome/settings-daemon/plugins/media-keys/terminal"
          value: "@as []"
      when: has_gui

    - name: Set keyboard shortcuts
      tags: shortcuts
      vars:
        keyboard_shortcuts:
          - index: 0
            name: "'Launch Alacritty'"
            command: "'alacritty'"
            binding: "'<Primary><Alt>t'"
          - index: 1
            name: "'Flameshot'"
            command: "'flameshot gui'"
            binding: "'Print'"
          - index: 2
            name: "'Set dual display'"
            command: "'{{ lookup('env', 'HOME') }}/.screenlayout/default.sh'"
            binding: "'<Primary><Alt>1'"
          - index: 3
            name: "'Set main display only'"
            command: "'{{ lookup('env', 'HOME') }}/.screenlayout/main-only.sh'"
            binding: "'<Primary><Alt>0'"
          - index: 4
            name: "'Activate snippets'"
            command: "'{{ lookup('env', 'HOME') }}/bin/snippets.sh'"
            binding: "'<Primary><Alt>s'"
      when: has_gui
      block:
        - name: Set shortcut names
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/name"
            value: "{{ item.name }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Set shortcut commands
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/command"
            value: "{{ item.command }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Set shortcut binding
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ item.index }}/binding"
            value: "{{ item.binding }}"
          with_items: "{{ keyboard_shortcuts }}"

        - name: Generate shortcut list
          set_fact:
            shortcut_list: "{{ [prefix] | product(indices) | map('join') | list | product([suffix]) | map('join') | list }}"
          vars:
            prefix: "'/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom"
            suffix: "/'"
            indices: "{{ keyboard_shortcuts | map(attribute='index') }}"

        - name: Set shortcut list
          dconf:
            key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
            value: "[{{ ','.join(shortcut_list) }}]"

# ---
# TODO:
#   - Install Syncthing https://gist.github.com/carlwgeorge/dbe186ce7562843932ebd03ccccd1a6d
#   - Install pip packages
#     - virtualenvwrapper
#
# References:
#   - https://gist.github.com/carlwgeorge/c560a532b6929f49d9c0df52f75a68ae
